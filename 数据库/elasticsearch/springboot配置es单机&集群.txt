1.pom依赖
springboot和es版本之间有对应关系，通常版本是完全对应的
如2.2.2版本的springboot对应同版本的es
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-data-elasticsearch</artifactId>
		<version>2.2.2.RELEASE</version>
	</dependency>
错误的版本可能会有各种启动、运行错误
务必匹配正确版本，但正确版本很多时候并不明确，官网并没有提供版本对应信息

2.application配置文件
#es集群名，默认elasticsearch，建议自定义集群名
spring.data.elasticsearch.cluster-name=liuwei_es_test
#es集群节点，端口为tcp端口，而非es服务端口
#单机spring.data.elasticsearch.cluster-nodes=x.x.x.x:9300
#集群spring.data.elasticsearch.cluster-nodes=x.x.x.x:9300,x.x.x.x:9300,x.x.x.x:9300
elasticsearch_pool_size=5

3.es模板配置类
package com.center.kafka.config;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.transport.client.PreBuiltTransportClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.data.elasticsearch.core.ElasticsearchTemplate;
import org.springframework.data.elasticsearch.core.EntityMapper;
import org.springframework.data.elasticsearch.core.geo.CustomGeoModule;
import org.springframework.data.mapping.MappingException;

import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.Map;

/**
 * @author liuwei
 * @date 2020-03-13 14:52
 * @desc es模板配置类
 */
@Configuration
@ConditionalOnExpression("${es_start_flag:true}")
@Slf4j
public class ElasticSearchConfig {

    @Autowired
    private Environment environment;

    @Bean
    public ElasticsearchTemplate elasticsearchTemplate(){
        log.info("ElasticsearchTemplate注册");
        return new ElasticsearchTemplate(esClient(),new CustomEntityMapper());
    }

    @Bean
    public Client esClient(){
        String clusterName = environment.getProperty("spring.data.elasticsearch.cluster-name");
        String clusterNodes = environment.getProperty("spring.data.elasticsearch.cluster-nodes");
        String poolSize = environment.getProperty("elasticsearch_pool_size");
        String[] nodes = clusterNodes.split(",");

        /**
         * 注意：es集群默认名称为elasticsearch，建议使用自定义名称
         */
        Settings setting = Settings.builder()
                .put("cluster.name", clusterName)
                /**
                 * 客户端是否嗅探集群节点ip和端口
                 * 设置为true时会报错
                 * None of the configured nodes are available
                 */
                //.put("client.transport.sniff", true)
                .put("thread_pool.search.size", Integer.parseInt(poolSize))
                .build();

        //集群节点配置
        TransportClient transportClient = new PreBuiltTransportClient(setting);
        for (String node : nodes) {
            String[] client = node.split(":");
            TransportAddress transportAddress = null;
            try {
                transportAddress = new TransportAddress(
                        InetAddress.getByName(client[0]), Integer.valueOf(client[1]));
            } catch (UnknownHostException e) {
                e.printStackTrace();
            }
            transportClient.addTransportAddresses(transportAddress);
        }
        return transportClient;
    }

    private class CustomEntityMapper implements EntityMapper {

        private final ObjectMapper objectMapper;

        public CustomEntityMapper() {
            objectMapper = new ObjectMapper();
            //反序列化策略：数组、时间等字段的处理
            //还可以设置一些序列化策略，registerModule中包含序列化和反序列化策略
            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
            objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
            objectMapper.registerModule(new CustomGeoModule());
            objectMapper.registerModule(new JavaTimeModule());
        }

        @Override
        public String mapToString(Object o) throws IOException {
            return objectMapper.writeValueAsString(o);
        }

        @Override
        public <T> T mapToObject(String s, Class<T> aClass) throws IOException {
            return objectMapper.readValue(s, aClass);
        }

        @Override
        public Map<String, Object> mapObject(Object o) {
            try {
                return (Map)this.objectMapper.readValue(this.mapToString(o), HashMap.class);
            } catch (IOException var3) {
                throw new MappingException(var3.getMessage(), var3);
            }
        }

        @Override
        public <T> T readObject(Map<String, Object> map, Class<T> aClass) {
            try {
                return this.mapToObject(this.mapToString(map), aClass);
            } catch (IOException var4) {
                throw new MappingException(var4.getMessage(), var4);
            }
        }
    }

}


4.实体类
参见《es实体类+测试类Demo》

5.简单测试类
参见《es实体类+测试类Demo》

6.启动
启动后会自动加载一些插件，可以看到默认的通信插件是Netty
loaded plugin [org.elasticsearch.index.reindex.ReindexPlugin]
loaded plugin [org.elasticsearch.join.ParentJoinPlugin]
loaded plugin [org.elasticsearch.percolator.PercolatorPlugin]
loaded plugin [org.elasticsearch.script.mustache.MustachePlugin]
loaded plugin [org.elasticsearch.transport.Netty4Plugin]

7.启动和运行错误
1.插入数据时报错
org.elasticsearch.client.transport.NoNodeAvailableException: 
None of the configured nodes are available: 
[{#transport#-1}{ulYSBvZQQuqJTkVkl92iYw}{x.x.x.x}{x.x.x.x:9300}]
首先，es集群的名称不建议用默认名称，其次，确认application配置端口为tcp端口
再次，settings不能配置嗅探集群节点
最后，确认依赖版本正确(最麻烦)

2.查询数据时报错
2.1 org.elasticsearch.index.IndexNotFoundException: no such index
配置elasticsearch.yml，允许建立索引，重启es
action.auto_create_index: true   #注意，冒号后有空格，否则报错无法启动

2.2 com.fasterxml.jackson.databind.exc.InvalidDefinitionException: 
Cannot construct instance of `java.time.LocalDateTime` (no Creators, like default construct, exist): 
cannot deserialize from Object value (no delegate- or property-based Creator)
LocalDateTime时间类型无法反序列化，配置序列化和反序列化似乎也不生效
使用字符串代替即可

2.3 Cannot search on field [desc] since it is not indexed.
字段必须索引为true才可以被检索

2.4 Result window is too large, from + size must be less than or equal to: [10000] but was [12000].
See the scroll api for a more efficient way to request large data sets. 
This limit can be set by changing the [index.max_result_window] index level setting.
(分页)查询时需要查询的窗口(如查询从第9000条到12000条)超出了默认值10000
有2种解决方案
1.设置index.max_result_window属性
	curl -H 'Content-type:application/json' -XPUT 'http://172.16.49.66:9200/_all/_settings?preserve_existing=true' -d '{"index.max_result_window" : "21000"}'   (更改所有索引的窗口)
	或者直接在elasticsearch.yml中设置index.max_result_window: 100000(这种yml配置在es6以后不允许再使用)
这种方式操作简单，但属于深度分页，以此例为例，会先查询出12000条数据，然后舍弃前9000条
这种方式严重es集群影响性能，不推荐
2.使用滚动搜索(Scroll API)api接口
参见《es实体类+测试类Demo》


2.5 Fielddata is disabled on text fields by default.
Set fielddata=true on [createTime] in order to load fielddata in memory by uninverting the inverted index. 
Note that this can however use significant memory. Alternatively use a keyword field instead.
命令查看类型的属性详情
curl -X GET 'http://es地址:es服务端口/索引名/_mapping/类型名/_search?pretty'
响应
{
  "es_test" : {
    "mappings" : {
      "testdoc" : {
        "properties" : {
          "count" : {
            "type" : "long"
          },
          "createTime" : {
            "type" : "text",
            "fields" : {
              "keyword" : {
                "type" : "keyword",
                "ignore_above" : 256
              }
            }
          },
          "desc" : {
            "type" : "text",
            "fields" : {
              "keyword" : {
                "type" : "keyword",
                "ignore_above" : 256
              }
            }
          },
          "flag" : {
            "type" : "boolean"
          },
          "id" : {
            "type" : "text",
            "fields" : {
              "keyword" : {
                "type" : "keyword",
                "ignore_above" : 256
              }
            }
          },
          "name" : {
            "type" : "text",
            "fields" : {
              "keyword" : {
                "type" : "keyword",
                "ignore_above" : 256
              }
            }
          }
        }
      }
    }
  }
}
可以通过命令开启字段的fielddata
curl -H "Content-Type:application/json" \
-X PUT 'http://es地址:es服务端口/索引名/_mapping/类型名?pretty' \
-d'{"类型名":{"properties":{"字段名":{"type":"text","fielddata":true}}}}'
响应
{
  "acknowledged" : true
}
上述操作通过java代码也可以执行，对字段添加注解@Field(type = FieldType.Text, fielddata = true)即可
继续查看类型的属性详情，可以看到字段的fielddata值已经修改
"createTime" : {
	"type" : "text",
	"fields" : {
	  "keyword" : {
		"type" : "keyword",
		"ignore_above" : 256
	  }
	},
	"fielddata" : true
}















