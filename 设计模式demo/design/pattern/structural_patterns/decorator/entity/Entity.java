package design.pattern.structural_patterns.decorator.entity;

import lombok.extern.slf4j.Slf4j;

/**
 * @author liuwei
 * @date 2019-07-29 22:52:05
 * @desc 旧对象
 * 对象中定义了一些功能，实际使用中，这些功能不能满足需要，功能现在需要扩展
 * 这个旧对象因为某些原因不能够被改造，需要通过其它方式改写方法内容
 * 如果需要对原方法内部逻辑进行改动，可以创建子类重写该方法
 * 如果只是需要对原方法外部逻辑进行改动，比如在执行这些方法的前后加入一些逻辑判断或执行别的代码逻辑
 * 此时，创建子类重写该方法并不是最佳选择，继承降低了类的扩展灵活性，除非的确需要，否则尽量避免
 * 可以新建一个类持有旧对象，并创建一个同名方法，在方法中使用旧对象调用旧方法，并在调用前后新增逻辑
 * 由于只是在原功能外部添加新的代码，这种行为就像对一个物体进行外部装饰一样
 * 故形象称为装饰模式
 */
@Slf4j
public class Entity {
	
	public void method() {
		log.info("我是一个旧方法");
	}
}
