package com.telecom.js.noc.hxtnms.operationplan.utils;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Field;

/**
 * Author: liuwei
 * Date: 2019-06-01 18:04
 * Desc: mapper.xml sql语句生成
 * 生成sql语句半成品，简化mapper.xml中sql语句编写
 */
@Slf4j
public class MapperSqlUtil {

    private final String ID_SELECT = "<selectKey resultType=\"int\" order=\"AFTER\" keyProperty=\"id\">\n" +
            "\tSELECT LAST_INSERT_ID() AS id\n" +
            "</selectKey>";
    private final String ORDER_BY = "\n        <choose>\n" +
            "            <when test=\"order != null\">\n" +
            "                <!--order by后不允许换行-->\n" +
            "                order by <foreach collection=\"order\" index=\"key\" item=\"value\" open=\"\" close=\"\" separator=\",\">${key} ${value}</foreach>\n" +
            "            </when>\n" +
            "            <otherwise>\n" +
            "                order by xxx desc\n" +
            "            </otherwise>\n" +
            "        </choose>\n";

    //批量插入id自增长的从表
    private final String INSERT_BATCH_RELATION_TABLE_AUTO = "<insert id=\"xxx\" parameterType=\"主表类\" useGeneratedKeys=\"true\">\n" +
            "\t<if test=\"从表list != null\" >\n" +
            "\t\tinsert into 从表名(xxx,xxx,xxx)\n" +
            "\t\tvalues\n" +
            "\t\t<foreach collection=\"从表list\" item=\"从表对象\" index= \"index\" separator =\",\" close=\";\">\n" +
            "\t\t\t(\n" +
            "\t\t\t#{xxx},\n" +
            "\t\t\t#{xxx},\n" +
            "\t\t\t#{xxx}\n" +
            "\t\t\t)\n" +
            "\t\t</foreach>\n" +
            "\t</if>\n" +
            "</insert>";
    //批量插入id自定义的从表
    private final String INSERT_BATCH_RELATION_TABLE ="<insert id=\"xxx\" parameterType=\"主表类\">\n" +
            "\t<if test=\"从表list != null\" >\n" +
            "\t\tinsert into 从表名(id,xxx,xxx,xxx)\n" +
            "\t\tvalues\n" +
            "\t\t<foreach collection=\"从表list\" item=\"从表对象\" index= \"index\" separator =\",\" close=\";\">\n" +
            "\t\t\t(\n" +
            "\t\t\t#{id},\n" +
            "\t\t\t#{xxx},\n" +
            "\t\t\t#{xxx},\n" +
            "\t\t\t#{xxx}\n" +
            "\t\t\t)\n" +
            "\t\t</foreach>\n" +
            "\t</if>\n" +
            "</insert>";

    private String[][] getArray(Class clz){
        Field[] fieldArray = clz.getDeclaredFields();
        int size = fieldArray.length;
        String[] fields = new String[size];
        String[] columns = new String[size];
        for (int i=0;i<size;i++){
            fields[i]=fieldArray[i].getName();
            columns[i]=StringUtils.replacePattern(fields[i],"([A-Z])","_$1").toLowerCase();
        }
        return new String[][]{fields,columns};
    }

    private void getMapperSql(String[][] array,String tableName){
        //"xxx,xxx,xxx"
        String column = "";
        //"(#{xxx},#{xxx},#{xxx})"
        String insertValue = "";
        //"xxx = #{xxx},xxx = #{xxx},xxx = #{xxx}"
        String updateStr = "";

        String[] fields = array[0];
        String[] columns = array[1];
        insertValue+="(";
        for (int i=0;i<fields.length;i++){
            if (i!=fields.length-1){
                column+=columns[i]+",";
                insertValue+="#{"+fields[i]+"},";
                if (!"id".equals(columns[i])){
                    updateStr+=columns[i]+" = #{"+fields[i]+"},";
                }
            }else{
                column+=columns[i];
                insertValue+="#{"+fields[i]+"})";
                updateStr+=columns[i]+" = #{"+fields[i]+"}";
            }
        }
        //单条插入id自增长的主表
        String INSERT_MAIN_TABLE_AUTO = "<insert id=\"xxx\" parameterType=\"xxx\" useGeneratedKeys=\"true\">\n" +
                "\t"+ID_SELECT+"\n" +
                "\tinsert into "+tableName+"("+column+")"+"\n" +
                "\tvalues"+insertValue+"\n" +
                "</insert>";
        //批量插入id自增长的主表
        String INSERT_BATCH_MAIN_TABLE_AUTO = "<insert id=\"xxx\" parameterType=\"xxx\" useGeneratedKeys=\"true\">\n" +
                "\tinsert into "+tableName+"("+column+")"+"\n" +
                "\tvalues\n" +
                "\t<foreach collection=\"list\" item=\"item\" index= \"index\" separator =\",\" close=\";\">\n" +
                "\t\t"+insertValue+"\n" +
                "\t</foreach>\n" +
                "</insert>";
        //单条主表修改
        String UPDATE_MAIN_TABLE = "<update id=\"xxx\" parameterType=\"xxx\">\n" +
                "\tupdate "+tableName+"\n" +
                "\tset "+updateStr+"\n" +
                "</update>";

        //打印这些sql
        log.info("- - - - -单条插入insert sql- - - - -");
        log.info("\n"+INSERT_MAIN_TABLE_AUTO);
        log.info("- - - - -多条插入insert sql- - - - -");
        log.info("\n"+INSERT_BATCH_MAIN_TABLE_AUTO);
        log.info("- - - - -单条逻辑删除update sql- - - - -");
        log.info("- - - - -多条逻辑删除update sql- - - - -");
        log.info("- - - - -单条修改update sql- - - - -");
        log.info("\n"+UPDATE_MAIN_TABLE);
        log.info("- - - - -多条修改update sql- - - - -");
        log.info("- - - - -查询- - - - -");
    }

    private String[] getFieldsByColumns(String[] columns){
        String[] fields = new String[columns.length];
        for (int i = 0; i < columns.length; i++) {
            if (!columns[i].contains("_")){
                fields[i]=columns[i];
            }else{
                String[] column = columns[i].split("_");
                fields[i] = column[0];
                for (int j = 1; j < column.length; j++) {
                    fields[i]+=StringUtils.capitalize(column[j]);
                }
            }
        }
        return fields;
    }

    private void getMapperSqlForeach(String[][] array,String tableName){
        String[] fields = array[0];
        String[] columns = array[1];

        StringBuilder insertBuilder = new StringBuilder("<insert id=\"xxx\" parameterType=\"xxx\" useGeneratedKeys=\"true\">\n<if test=\"xxx != null\" >\ninsert into "+tableName+"(");
        StringBuilder insertValuesBuilder = new StringBuilder("\nvalues\n<foreach collection=\"xxx\" item=\"item\" index= \"index\" separator =\",\" close=\";\">\n");
        for (int i=0;i<fields.length;i++){
            if (i!=fields.length-1){
                insertBuilder.append(columns[i]+",");
                insertValuesBuilder.append("#{item."+fields[i]+"},");
            }else{
                insertBuilder.append(columns[i]+")").append(insertValuesBuilder).append("#{item."+fields[i]+"})\n</foreach>");
            }
        }

        //打印sql
        log.info("- - - - -insert foreach sql- - - - -");
        log.info(insertBuilder+"\n</if>\n</insert>");
    }

    /**
     * 标准sql
     * @param clz  实体类class
     * @param tableName  数据表名
     */
    public void getMapperSql(Class clz,String tableName){
        String[][] array = getArray(clz);
        getMapperSql(array,tableName);
    }

    /**
     * 根据列名字符串生成sql
     * @param tableName  数据表名
     * @param columnsString  数据列字符串，形如"plan_name,updater,owner,period_year"
     */
    public void getMapperSql(String tableName,String columnsString){
        String[] columns = columnsString.split(",");
        String[] fields = getFieldsByColumns(columns);
        String[][] array = new String[][]{fields,columns};
        getMapperSql(array,tableName);
    }

    /**
     * 根据列名字符串生成insert foreach的sql
     * @param tableName  数据表名
     * @param columnsString  数据列字符串，形如"plan_name,updater,owner,period_year"
     */
    public void getMapperSqlForeach(String tableName,String columnsString){
        String[] columns = columnsString.split(",");
        String[] fields = getFieldsByColumns(columns);
        String[][] array = new String[][]{fields,columns};
        getMapperSqlForeach(array,tableName);
    }

}
