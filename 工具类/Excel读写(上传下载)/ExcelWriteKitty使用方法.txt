依赖：
	<dependency>
		<groupId>org.apache.poi</groupId>
		<artifactId>poi</artifactId>
		<version>3.10-FINAL</version>
	</dependency>
	<dependency>
		<groupId>org.apache.poi</groupId>
		<artifactId>poi-ooxml</artifactId>
		<version>3.10-FINAL</version>
	</dependency>


综述：
mapper层(含mapper.xml)
	检索出List<Map<String columnName, Object columnValue>>格式数据，其中Map为LinkedHashMap类型
controller层
	创建ExcelWriteKitty(String sheetName, String[] headerNames)对象，指定结果集的导出开始列setStartColumnIndex(int mapResultStartIndex)，默认第1列开始导出
	ExcelWriteKitty对象调用writeExcel(List<Map<String,Object>> dataListMap, OutputStream out)写入excel数据到输出流
	输出流为HttpServletResponse.getOutputStream()时，写入前端响应
	输出流可以是其它设备，如本地文件路径等，excel据此写入文件系统或其它
entity类
	日期字段格式化处理，实体类定义LocalDateTime，数据库存储datetime，get取值String，前端增、修时数据库可正常入库，查询时则格式化输出


【控制层】
前端JSON传参格式：
[
	12,
	16
]
控制方法接收参数：
@RequestBody List<Integer> planIdList

    @Autowired
    private PlanBaseService planBaseService;

    /**
     * 作业计划导出
     * @param response
     * @param param 作业计划id列表
     */
    @RequestMapping(value = "downloadExcel")
    public ResponseBox downloadExcel(HttpServletResponse response, @RequestBody Map<String,List<Integer>> param){
        List<Integer> planIdList = param.get("planIdList");
        //导出选中的plan_id列表：按id查询速度更快，推荐此类方式
        return ExcelExportMan.downloadExcel(response,
                planBaseService.queryPlansMapByIds(planIdList),
                new ExcelWriteKitty("作业计划",new String[]{"作业计划名称","创建人","所属用户","周期","时间范围","上次执行时间"
                        ,"区域","模板名称","任务状态","运行状态","是否异常","创建时间","更新人","更新时间"}),
                "作业计划表");
    }
	
【服务层】
接口不述，以下为实现类

	@Autowired
    private PlanBaseMapper planBaseMapper;
	@Override
    public List<Map<String, Object>> queryPlansMapByIds(List<Integer> planIdList){
        //按id列表查询多个
        return planBaseMapper.queryPlansMapByIds(planIdList);
    }

【mapper接口和xml】
	//按id列表查询多个
    List<Map<String, Object>> queryPlansMapByIds(List<Integer> planIdList);

	<!--导出列表：按id列表查询-->
    <!--返回类型为Map时将不保证字段的查询顺序为返回顺序，应使用LinkedHashMap，且必须对null字段进行非null处理-->
    <!--☆☆☆如果在使用ExcelWriteKitty时指定表头名和列名的对应关系，则此处只需要返回map即可，详见该类的相关代码和注释-->
    <!--☆☆☆强烈建议在使用ExcelWriteKitty时指定表头名和列名的对应关系-->
    <!--☆☆☆实际上也允许返回一个Java Bean对象，然后调用ExcelExportMan.downloadExcelByBean导出，此时要求必须指定列名数组-->
    <select id="queryPlansMapByIds" parameterType="java.util.List" resultType="java.util.LinkedHashMap">
        select plan.id,plan.plan_name,man.cn_name as owner_id,plan.location,plan.model_name,
			case plan.status when 0 then '草稿' when 1 then '激活' when 2 then '挂起' else '异常' end as status
			,plan.update_time
        from oper_plan as plan,oper_plan_user as man
        where plan.del_flag = 0
        and man.id = plan.owner_id
        and plan.id in
			<foreach collection="list" index="index" item="planId" open="(" separator="," close=")">
				#{planId}
			</foreach>
    </select>

【实体类】
实体类需要注意的是，对日期字段的格式化，建议使用LocalDateTime(自JDK1.8)，并对取值方法格式化处理，返回String字符串即可(实体类定义LocalDateTime，数据库存储datetime，get取值String)
	//1.工具类中定义以下静态常量
    public static final String TIME_TYPE_DEFAULT = "yyyy-MM-dd HH:mm:ss";
    public static final String TIME_TYPE_MILLSECOND = "yyyy-MM-dd HH:mm:ss.SSS";
	
	//2.实体类日期字段
	private LocalDateTime updateTime;

    //日期格式化：取值时格式化日期
    public String getUpdateTime(){
        return updateTime.format(DateTimeFormatter.ofPattern(CommonConstants.TIME_TYPE_DEFAULT));
    }


