package cn.js189.cloud.util;

import cn.js189.cloud.common.exception.BaseException;
import org.apache.commons.lang3.StringUtils;
import org.springframework.core.io.support.PropertiesLoaderUtils;

import java.io.IOException;
import java.util.*;

/**
 * @author liuwei
 * @date 2019-10-16 14:15
 * @desc 本地properties文件集工具类
 * path为resource路径下properties文件路径
 */
public class PropertiesUtil {

    /**
     * Properties属性对象缓存
     */
    private static final Map<String, Properties> propertiesMap = new HashMap<>();

    private static void setMap(String path) {
        try {
            synchronized(PropertiesUtil.class){
                propertiesMap.put(path,PropertiesLoaderUtils.loadAllProperties(path));
            }
        } catch (IOException e) {
            throw new BaseException("获取属性文件"+path+"失败");
        }
    }

    private static void validatePathAndSetMap(String path){
        if (StringUtils.isEmpty(path)) {
            throw new BaseException("指定路径不能为空！");
        }
        if(!propertiesMap.containsKey(path)){
            setMap(path);
        }
    }

    //获取一个属性
    public static String getProperty(String path, String key){
        validatePathAndSetMap(path);
        return propertiesMap.get(path).getProperty(key);
    }

    //获取一组属性
    public static String[] getProperty(String path, String[] keys){
        validatePathAndSetMap(path);
        String[] vars = new String[keys.length];
        for (int i = 0; i < keys.length; i++) {
            vars[i] = propertiesMap.get(path).getProperty(keys[i]);
        }
        return vars;
    }

    //列出当前已经获取的属性文件名
    public static List<String> getAllPathsLoaded(){
        List<String> list = new ArrayList<>();
        Set<String> nameSet = propertiesMap.keySet();
        if (!nameSet.isEmpty()) {
            Iterator<String> iterator = nameSet.iterator();
            while (iterator.hasNext()){
                list.add(iterator.next());
            }
        }
        return list;
    }

}
