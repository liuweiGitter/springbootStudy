【mysql集群的两种复制方式】
mysql有2种复制模式：
主从复制：主库授权从库远程连接，读取主库binlog日志并更新到从库数据库的过程
	主库写数据后，从库会自动同步过来(从库跟着主库变)
	主从复制实现了每一个从节点的数据的同步，借助中间件可实现读写分离以及主节点宕机的自动恢复，提高了垂直方向的读写性能和容灾能力
主主复制：对等库相互授权连接，读取对方binlog日志并更新到本地数据库的过程
	只要对方数据改变，自己就跟着改变(对等库互为主库)
	主主复制实现了每一个主节点的数据的同步，借助中间件可实现多个主服务器的负载均衡

【mysql的读写分离和分片选择】
当数据量不多时，可以只进行单库的读写分离
当数据量很大时，需要水平扩容，需在读写分离的基础上，进行服务集群
集群/分片实现所有数据拆分分布到多个服务器上，每个集群节点分布整体数据的一部分，提高了系统的总容量

项目根据需要，可以选择主从复制(读写分离)、主主集群(负载均衡)或者分片集群(分库分表)

【springboot配置mysql数据库读写分离和分片】
mycat可以同时负责分片和读写分离，可以只分片，也可以只读写分离
mycat适合分片表的读写分离，只需要配置少量分片表即可
所有的表的读写分离都依靠mycat时，需要配置太多的表名

springboot上只需像配置单机mysql一样配置mycat地址即可
使用mycat是最简单的集群做法，当然，也可以不通过中间件，而是通过程序配置读写使用不同的数据源，在读写时切换数据源实现分离

当需要读写分离时，服务器需要安装一mysql主，多mysql从，并配置主从复制
当需要分片时，拷贝同样的主从集群，形成另外的片区
参见：https://blog.csdn.net/houdezaiwu1/article/details/90638560?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task

对于一主多从的故障需要自动处理
在主库故障时需要从库自动切换为主库，可以使用zookeeper集群选举主库，较复杂，推荐直接使用mycat配置(默认就会切换)
在所有从库故障时，mycat会自动从主库读数据
参见：https://blog.csdn.net/yabingshi_tech/article/details/52400563