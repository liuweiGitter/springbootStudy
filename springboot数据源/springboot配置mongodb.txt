1.pom引入依赖
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-data-mongodb</artifactId>
	</dependency>

2.配置application属性文件数据源
	spring.data.mongodb.host=马赛克
	spring.data.mongodb.port=马赛克
	spring.data.mongodb.database=马赛克
	
3.实体类配置
	注解MongoDB集合：@Document(collection = "集合名")
	属性名和集合中字段名相同(都是驼峰命名，集合中不能用下划线对应属性)

4.服务层注入mongoTemplate对象
	@Autowired
    private MongoTemplate mongoTemplate;

5.服务层调用mongoTemplate对象接口实现增删改查操作
	创建一个集合
	删除一个集合
	获取指定的集合：MongoCollection<Document> getCollection(final String collectionName)

	插入一个对象：T insert(T objectToSave)
	插入一组对象：Collection<T> insertAll(Collection<? extends T> objectsToSave)
	插入一个对象到一个集合：T insert(T objectToSave, String collectionName)
	插入一组对象到一个集合：Collection<T> insert(Collection<? extends T> batchToSave, String collectionName)

	删除一个对象，通过id：DeleteResult remove(Object object)
	删除一个对象，通过id，指定集合名：DeleteResult remove(Object object, String collectionName)
	删除对象，通过查询条件：DeleteResult remove(Query query, Class<?> entityClass)
	删除对象，通过查询条件，指定集合名：DeleteResult remove(Query query, String collectionName)

	修改第一个：
	UpdateResult updateFirst(Query query, Update update, Class<?> entityClass)
	UpdateResult updateFirst(Query query, Update update, String collectionName)
	修改多个：
	UpdateResult updateMulti(Query query, Update update, Class<?> entityClass)
	UpdateResult updateMulti(Query query, Update update, String collectionName)
	
	查询：不详述

6.测试类中使用MongoTemplate对象
    参考《MongoDbTest.java》









