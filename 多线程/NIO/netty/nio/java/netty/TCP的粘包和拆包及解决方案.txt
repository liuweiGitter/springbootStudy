【TCP的粘包和拆包概念、现象和原因分析】
TCP底层并不了解上层业务数据的具体含义，它会根据TCP缓冲区的实际情况进行包的划分
业务上认为，一个完整的包可能会被TCP拆分为多个包进行发送，也可能把多个小的包封装成一个大的数据包进行发送，这就是所谓的TCP拆包与粘包问题

也就是说，接收方在通道中会接收到一个TCP包，这个包可能是源数据的一部分，即被拆分的包(又称为半包)，也可能是多个源数据的拼接，即被粘接的包
拆包导致接收方在通道中read消息时读取到的数据不完整，如果应用层不能得到完整的消息，则受此影响，后续的处理逻辑可能会出现错误
粘包导致接收方在通道中read消息时读取到的数据涵盖多个源数据包，如果应用层无法分割这些包，则不能读取到正确的消息

如果通道中对接收到的消息条数进行统计，在粘包时会发现消息数量减少，比如发送100条短消息，通道只统计到2条，这是因为每50条短消息被拼接为一个TCP包发送了
在拆包时则会发现消息数量增加，比如发送1条长消息，通道统计到10条，这是因为这条长消息被拆分为10个TCP包发送了

另外，拆包和粘包并不是独立的，更可能是同时发生的
一条长消息，被拆分了10个包，如果第10个包长度较短，则可能还会拼接另一个短消息再发送

粘包/拆包问题产生的原因有3个：
1.应用程序写入的字节大于套接字缓冲区的大小从而引起应用层数据分片
2.套接字缓冲区的大小大于通信链最大TCP数据包MSS的大小从而引起TCP层数据分片
3.IP数据包的大小大于通信链最大IP数据包MTU的大小从而引起IP层数据分片

【粘包问题的解决策略】
TCP层是无法控制粘包和拆包的，因此，应用层必须能够识别和还原源数据包，毫无疑问，应用层必须对通信的数据格式有所约定，从而进行正确的包解析
应用层通信协议主要有以下几种类型的约定：
1.消息定长，长度不足时补空格或其它字符，从而避免消息过大拆包和过小粘包
2.包尾增加分隔符(换行符或其它字符)，从而使得即使拆包和粘包也能区分开来
3.消息自述长度，通常是将消息分为消息头和消息体，消息头中包含整条消息的长度或消息体的长度，从而得到消息的终点位置
4.更复杂的协议

【粘包问题的解决方案：各类解码器的使用】
对应前3个解决策略，Netty中有3类内置的解码器来解决粘包问题
分别是：定长解码器、换行解码器/分隔符解码器、各类公有协议解码器

所有的解码器都位于io.netty.handler.codec包中，其中各类公有协议位于协议名称命名的子包中

netty4支持非常广泛而又详尽的公有协议的编码和解码，包括但不限于：
byte[]
string(私有分隔符)
base64
压缩文件协议组：Bzip2、Zlib等
dns
http协议组：http、http2、cookie、websocket
json
redis
xml

对于这些公有协议，支持协议中多个功能片段的编解码
以http协议为例，支持对HttpHeader、HttpContent、HttpRequest、HttpResponse、Cookie等的编解码

除非使用内置编解码器不支持的公有协议或者用户定制了私有协议，否则不需要用户自己编写编解码器
Netty的简单易用性也体现在其内置的各类编解码器适用于大多数的通信数据格式

关于定长解码器、换行解码器和分隔符解码器的使用，参见同层代码示例，不赘述
关于各类公有协议编解码器的内容，详参Netty中相应的API

