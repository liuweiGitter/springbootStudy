通道Channels
缓冲区Buffers
轮询选择器Selectors

通道连接通信双方，NIO在通道中读写数据，数据源涵盖各种类型，包括网络IO和本地文件IO
一方写数据时，写入通道的缓冲区
另一方读数据时，读取来自通道缓冲区的数据
数据IO实际在通道中的缓冲区发生

BIO中一个IO过程是同步阻塞型的，单线程一次只能处理一个IO过程
所谓同步，指的是IO准备(文件寻址、加载内存、加载网卡、远程传输、加载内存等本地读写前的所有准备)阶段线程等待
所谓阻塞，指的是数据读写(内核复制数据到用户空间再到JVM)阶段等待
NIO的IO过程则是同步非阻塞型的，单线程可以同时处理多个IO过程，这是通过轮询选择器实现的
单线程Thread中创建一个Selectors，每个Channels在建立时向Selectors注册自己
轮询器维持一个动态的在册通道列表，并让线程阻塞所有通道，直到有通道已可读写
当轮询器检测到一个通道的IO准备完成(对于NIO，实际是数据已经到了缓冲区)后，放行该通道的数据读写
在放行一个通道的数据读写时，轮询器不会等待这个通道读写完成，而是继续轮询余下的通道列表
如果此时另一个通道也可读写，仍然需要阻塞等待，直到上一个通道的读写完成
因此，NIO所谓的非阻塞，并不是指可以同时读写多个IO，而是指轮询一直进行，所有通道的IO准备和IO读写两个阶段仍然都是同步阻塞的

那么NIO的并发高效体现在哪里？
BIO通过多线程完成并发IO，NIO通过单线程即可实现
NIO可以在单个线程中对多个通道同时进行等待，减少了等待的线程开销
在数据读写阶段，虽然是多IO阻塞，但每个通道是通过缓冲区读写数据，因此读写速度更快
特别地，如果多通道IO每次读写的数据量都很低(比如聊天服务器)，在一定的通道数量内，读写的阻塞几乎可以忽略不计
因此，NIO在高并发连接但低数据量通信的场景下的效率相比BIO更加显著
实际上，大部分应用场景下，通信数据量都比较低，尤其是相对服务器IO、内存等方面高性能的配置

【附录A】
常见的通道类型：
//文件IO通道
FileChannel
//网络IO通道
DatagramChannel(UDP通道)
SocketChannel(TCP通道)
ServerSocketChannel(TCP通道)

【附录B】
常见的缓冲区类型(覆盖了所有的基本类型数据)：
ByteBuffer
CharBuffer
DoubleBuffer
FloatBuffer
IntBuffer
LongBuffer
ShortBuffer
