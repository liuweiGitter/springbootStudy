内存泄露的根本原因基本确定是springboot程序退出时线程池、连接池、文件句柄、网络句柄等资源没有回收，导致后台长期运行boot程序，即使tomcat不再代理这些程序的web请求。
这些资源长期占据内存消耗cpu，短期还会占用数据库连接，长期发布程序或者打补丁后，后台进程内存逐渐耗尽。
这些后台程序也不是僵尸进程，因为父进程已经kill掉，所以可以直接继续强杀进程本身来释放进程资源。
没有回收的原因主要有两点，一是-9强杀，二是程序未自我注销资源。
jvm钩子或者spring监听都可以注销部分资源，但都不响应-9进程强杀，因此，为彻底清除残留进程，可以选择的解决方案是，
【开发】程序在监听中注销部分(因框架封装限制无法全部)资源如自定义线程池 && 【运维】关闭程序时-15软杀 && 【运维】软杀后等待资源释放半分钟后补-9强杀


tomcat进程的kill很特殊，说kill掉了吧，后台pid还一直在，说没kill掉吧，tcp端口已经没了
应该这样说，tomcat进程的tcp服务停了，web请求进不来了，但进程没停，代码一直在跑，只是外界再也没有tomcat渠道去访问了

主动销毁是个问题，一个java进程里开了很多个线程，有很多个数据库连接，有网络通信socket，有文件open句柄
spring框架没有对外提供这些资源关闭的统一入口，只能一个个去关，但这些句柄没办法都通过代码拿到，所以，大部分资源是停不掉