package com.jshx.zq.p2p.test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * @author liuwei
 * @date 2020-01-13 16:56
 * @desc java调用shell命令和脚本测试
 */
public class ShellCalledTest {


    public static void main(String args[]) {
        executeShellScript();
    }

    /**
     * 调用shell命令
     * ping测demo
     */
    private static void executeShellCommand(){
        Process process;
        Runtime runtime = Runtime.getRuntime();
        String line = "";
        int pkg = 5;
        String ip = "127.0.0.1";
        String command = "ping_result=`ping -c "+pkg+" -i 0.01 -q "+ip+" | grep -A2 received` && " +
                "lost_packet=`echo $ping_result | grep received | awk -F ',' '{print $3}' | awk -F '%' '{print $1}'` && " +
                "delay_avg=`echo $ping_result | grep avg | awk -F '/' '{print $5}'` && " +
                "echo 丢包率 ${lost_packet}%, 延迟 ${delay_avg}ms";
        try {
            /**
             * 复杂命令聚集在一个命令中，并使用以下数组作为shell命令整体执行
             * 简单命令传入一个字符串参数即可
             */
            process = runtime.exec(new String[]{"sh","-c",command});
            //根据需要，此处获取并打印了调用的返回值
            BufferedReader input = new BufferedReader(new InputStreamReader(process.getInputStream()));
            while ((line = input.readLine()) != null) {
                System.out.println(line);
            }
            input.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * 执行shell脚本
     * 注意使用绝对路径
     */
    private static void executeShellScript(){
        Process process;
        Runtime runtime = Runtime.getRuntime();
        String line = "";
        String command = "sh /ping/sayHello.sh";
        try {
            /**
             * 复杂命令聚集在一个命令中，并使用以下数组作为shell命令整体执行
             * 简单命令传入一个字符串参数即可
             */
            process = runtime.exec(command);
            BufferedReader input = new BufferedReader(new InputStreamReader(process.getInputStream()));
            while ((line = input.readLine()) != null) {
                System.out.println(line);
            }
            input.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}
